from __future__ import annotations

import uuid
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Any, Callable


class DevelopmentPhase(Enum):
    EXPERIMENTATION = "experimentation"
    PREPROCESSING = "preprocessing"
    TRAINING = "training"
    FINETUNING = "fine-tuning"
    PRODUCTION = "production"
    UNKNOWN = "unknown"


class EventType(Enum):
    """
    The type of event generated by LangChain.
    """

    CHAIN = "chain"
    TOOL = "tool"
    RETRIEVAL = "retrieval"
    LLM_MODEL = "llm_model"
    CHAT_MODEL = "chat_model"


@dataclass(frozen=True)
class Package:
    """
    Package represents a package to be patched.
    """

    name: str
    versions: tuple[str, ...]
    to_patch: tuple[str, ...]


@dataclass
class Watched:  # pylint: disable=too-many-instance-attributes
    """
    Watched represents a call to a function that was patched.
    """

    module: str
    version: str
    function: str
    called_start: datetime
    called_end: datetime
    called_with_args: tuple[Any, ...]
    called_with_kwargs: dict[str, Any]
    called_with_nebuly_kwargs: dict[str, Any]
    returned: Any
    generator: bool
    generator_first_element_timestamp: datetime | None
    provider_extras: dict[str, Any] | None = None

    def to_dict(self) -> dict[str, Any]:
        """
        to_dict returns a dictionary representation of the Watched instance.
        """
        return {
            "module": self.module,
            "version": self.version,
            "function": self.function,
            "called_start": self.called_start.isoformat(),
            "called_end": self.called_end.isoformat(),
            "called_with_args": self.called_with_args,
            "called_with_kwargs": self.called_with_kwargs,
            "called_with_nebuly_kwargs": {
                **self.called_with_nebuly_kwargs,
                **{
                    "nebuly_phase": self.called_with_nebuly_kwargs["nebuly_phase"].value
                },
            },
            "returned": self.returned,
            "generator": self.generator,
            "generator_first_element_timestamp": (
                self.generator_first_element_timestamp.isoformat()
                if self.generator_first_element_timestamp
                else None
            ),
            "provider_extras": self.provider_extras,
        }


@dataclass
class EventHierarchy:
    parent_run_id: uuid.UUID
    root_run_id: uuid.UUID


@dataclass
class CallbackKwargs:
    """
    The kwargs of the input and output callbacks of a Chain block.
    """

    inputs: dict[str, Any]
    outputs: dict[str, Any]


@dataclass
class ChainEvent:  # pylint: disable=too-many-instance-attributes
    module: str
    """
    The Python module that generated the chain event.
    """

    run_id: uuid.UUID
    """
    An ID that identifies the event.
    """

    hierarchy: EventHierarchy | None

    type: EventType

    serialized: dict[str, Any]
    """
    The field "serialized" of the LangChain callback.

    It contains different information according to the EventType:
    * Chain: properties of the Chain, including the Python class name
    * Tool: the name and textual description of the tool
    * Retrieval: properties of the retriever, including the Python Class name
    * LLMModel: includes information about the provider of the model and
      the hyperparameters used for calling the model.
    * Chat: includes information about the provider of the model and
      the hyperparameters used for calling the model.
    """

    inputs: dict[str, Any]
    """
    The inputs of the Chain block.

    The keys are arbitrarily defined by the developer of the Chain and
    are then interpreted by the LLM of the Chain.
    Example:
    > chain = MyChain(input_variables=["my_input_1", "my_input_2"])

    If the Chain block is the outer one (e.g. root),
    then the inputs are the inputs of the end user calling the Chain.
    """

    outputs: dict[str, Any]
    """
    The outputs of the Chain block.
    """

    callback_kwargs: CallbackKwargs | None
    """
    The kwargs of the input and output callbacks of a Chain block.
    """

    called_with_nebuly_kwargs: dict[str, Any] = field(default_factory=dict)

    def to_dict(self) -> dict[str, Any]:
        """
        to_dict returns a dictionary representation of the WatchedEvent instance.
        """
        return {
            "module": self.module,
            "run_id": self.run_id,
            "hierarchy": self.hierarchy,
            "type": self.type.value,
            "serialized": self.serialized,
            "inputs": self.inputs,
            "outputs": self.outputs,
            "callback_kwargs": self.callback_kwargs,
            "called_with_nebuly_kwargs": {
                **self.called_with_nebuly_kwargs,
                **{
                    "nebuly_phase": self.called_with_nebuly_kwargs["nebuly_phase"].value
                },
            },
        }


Observer = Callable[[Watched | ChainEvent], None]

Publisher = Callable[[Watched | ChainEvent], None]
