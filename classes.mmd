classDiagram
  class Callable {
  }
  class TextIOWrapper {
    close()*
    detach()*
    fileno()*
    flush()*
    isatty()*
    read()*
    readable()*
    readline()*
    readlines()*
    reconfigure()*
    seek()*
    seekable()*
    tell()*
    truncate()*
    writable()*
    write()*
    writelines()*
  }
  class _IOBase {
    close()*
    fileno()*
    flush()*
    isatty()*
    readable()*
    readline()*
    readlines()*
    seek()*
    seekable()*
    tell()*
    truncate()*
    writable()*
    writelines()*
  }
  class _TextIOBase {
    close()*
    detach()*
    fileno()*
    flush()*
    isatty()*
    read()*
    readable()*
    readline()*
    readlines()*
    seek()*
    seekable()*
    tell()*
    truncate()*
    writable()*
    write()*
    writelines()*
  }
  class RLock {
    acquire()*
    release()*
  }
  class deque {
    iterable : list
    maxlen : int
    append(x)*
    appendleft(x)*
    clear()*
    copy()
    count(x)
    extend(iterable)*
    extendleft(iterable)*
    index(x, start, end)
    insert(i, x)*
    pop()
    popleft()
    remove(value)*
    reverse()
    rotate(n)
  }
  class date {
    day
    month
    year
    ctime()
    fromisocalendar(year, week, day)
    fromisoformat(date_string)
    fromordinal(n)
    fromtimestamp(t)
    isocalendar()
    isoformat()
    isoweekday()
    replace(year, month, day)
    strftime(fmt)
    timetuple()
    today()
    toordinal()
    weekday()
  }
  class datetime {
    fold
    hour
    microsecond
    minute
    second
    tzinfo
    astimezone(tz)
    combine(date, time, tzinfo)
    ctime()
    date()
    dst()
    fromisoformat(date_string)
    fromtimestamp(t, tz)
    isoformat(sep, timespec)
    now(tz)
    replace(year, month, day, hour, minute, second, microsecond, tzinfo)
    strptime(date_string, format)
    time()
    timestamp()
    timetuple()
    timetz()
    tzname()
    utcfromtimestamp(t)
    utcnow()
    utcoffset()
    utctimetuple()
  }
  class Enum {
    name()
    value()
  }
  class JSONEncoder {
    allow_nan : bool
    check_circular : bool
    default
    ensure_ascii : bool
    indent : NoneType
    item_separator : str
    item_separator : str
    key_separator
    key_separator : str
    skipkeys : bool
    sort_keys : bool
    default(o)
    encode(o)
    iterencode(o, _one_shot)
  }
  class ConsumerWorker {
    publish
    queue : Queue[Watched]
    running : bool
    thread
    run() None
    stop() None
  }
  class DevelopmentPhase {
    name
  }
  class Package {
    name : str
    to_patch : tuple[str, ...]
    versions : tuple[str, ...]
  }
  class Watched {
    called_end
    called_start
    called_with_args : tuple
    called_with_kwargs : dict[str, Any]
    called_with_nebuly_kwargs : dict[str, Any]
    function : str
    generator : bool
    generator_first_element_timestamp : datetime | None
    module : str
    returned
    version : str
    to_dict() dict[str, Any]
  }
  class APIKeyNotProvidedError {
  }
  class AlreadyImportedError {
  }
  class NebulyAlreadyInitializedError {
  }
  class NebulyException {
  }
  class NebulyHTTPError {
  }
  class NebulyObserver {
    on_event_received(watched: Watched) None
  }
  class CustomJSONEncoder {
    default(o)
  }
  class Condition {
    acquire
    release
    notify(n)
    notifyAll()
    notify_all()
    wait(timeout)
    wait_for(predicate, timeout)
  }
  class Event {
    clear()
    isSet()
    is_set()
    set()
    wait(timeout)
  }
  class Thread {
    daemon
    daemon
    ident
    name
    name
    native_id
    getName()
    isDaemon()
    is_alive()
    join(timeout)
    run()
    setDaemon(daemonic)
    setName(name)
    start()
  }
  class _RLock {
    acquire(blocking, timeout)
    release()
  }
  class Callable {
  }
  TextIOWrapper --|> _TextIOBase
  _TextIOBase --|> _IOBase
  datetime --|> date
  DevelopmentPhase --|> Enum
  APIKeyNotProvidedError --|> NebulyException
  AlreadyImportedError --|> NebulyException
  NebulyAlreadyInitializedError --|> NebulyException
  NebulyHTTPError --|> NebulyException
  CustomJSONEncoder --|> JSONEncoder
  Callable --|> Callable
  TextIOWrapper --* Thread : _stderr
  deque --* Condition : _waiters
  datetime --* Watched : called_start
  datetime --* Watched : called_end
  Condition --* Event : _cond
  Event --* Thread : _started
  Thread --* ConsumerWorker : thread
  RLock --o Condition : _lock
  _RLock --o Condition : _lock
  Callable --o ConsumerWorker : publish
